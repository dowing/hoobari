# ------------------------------ HEADER ------------------------------

# --------- packages ------------
import os
import sys
import vcf
import numpy as np
import pandas as pd

# --------- constants ----------
sample_id = '12148'
project_dir = os.path.abspath('/home/tom/nshomron_tomr/projects/cffdna/simulations/lo')
bam_files_dir = os.path.join(project_dir, 'lo_from_tmp', sample_id, 'foc_ex',)
parents_vcf_file = os.path.join(bam_files_dir, sample_id + '_parents_foc_ex.old.vcf')
parents_df_pkl = os.path.join(bam_files_dir, sample_id + '_parents_df.pkl')
cfdna_vcf_file = os.path.join(bam_files_dir, sample_id + '_cfdna_foc_ex.vcf')
cvs_vcf_file = os.path.join(bam_files_dir, sample_id + '_cvs_foc_ex.vcf')


# --------- functions ----------
def print_progress(progress_index):
    print(str(round(100*((progress_index)/55593), 3)) + '%' + '\r', end="")

def vcf_rec_to_var_uid(rec):
    uid = rec.CHROM + ':' + str(rec.POS) + '_' + rec.REF + '/' + str(rec.ALT[0])
    return uid

def gt_string_to_int(gt):
    if gt is not None:
        gt_split = gt.split('/')
        gt_sum = int(gt_split[0]) + int(gt_split[1])
        return gt_sum
    else:
        return None

def parse_vcf_to_array(vcf_file_path):
    vcf_list = []
    with open(vcf_file_path, 'r') as inp:
        reader = vcf.VCFReader(inp)

        samples = reader.samples
        vcf_list.append(['variant_name'] + samples)

        progress_index = 0
        for record in reader:
            variant_name = [vcf_rec_to_var_uid(record)]
            genotypes = []
            for s in range(len(samples)):
                gt = gt_string_to_int(record.genotype(samples[s]).data[0])
                genotypes.append(gt)
            line = variant_name + genotypes

            vcf_list.append(line)
            progress_index += 1
            print_progress(progress_index)
        
        vcf_array = np.array(vcf_list)
        vcf_df = pd.DataFrame(data = vcf_array[1:,1:], index = vcf_array[1:,0], columns = vcf_array[0,1:])
        return vcf_df

def parse_qnames_at_positions(table_file_path, sample_names):
    '''
    This function parses the query names covering each SNP and the allele they support, from a specific (described)
    input: table_file_path - path to a a tab delimited table file where each entry starts with chrN:position (e.g. chr1:1236586)
    followed by tab delimited lines, which contain sample name, read query names (from a bam file) and genotype 
    supported by this read (as decided by the variant caller). sample_names is a list of sample names used.
    output: a dictionary for each sample in which each key is a qname of a read and each value is the genotype at
    this read.
    '''
    lengths_file = open(table_file_path, 'r')
    
    # create one dictionary, containing dictionaries for each sample
    lengths_dic = {}
    for sn in sample_names:
        lengths_dic.update({sn: ''})

    # iterate over the input file and add reads to the matching dictionary
    for line in lengths_file:
        line_split = line.rstrip().split('\t')
        lengths_dic[line_split[0]][line_split[1]] = int(line_split[2])
    lengths_file.close()

    return lengths_dic

def calculate_prior_probabilities(cfdna_gt, parents_gt):

    # calculate prior probabilities for each of the 3 possible fetal genotype
    # calculations below assume maternal genotype = '0/1', since these are the positions of interest

    fetal_genotypes = [2,1,0]
    priors_list = []
    priors_list.append([''] + fetal_genotypes)
    for variant_name in cfdna_gt.index.values:
        paternal_genotype = parents_gt.loc[variant_name,parents_gt.columns.values[1]]
        variant_priors = []
        for fetal_genotype in fetal_genotypes:
            if fetal_genotype == 2:
                if paternal_genotype == 2:
                    prior = 0.5
                elif paternal_genotype == 1:
                    prior = 0.25
                elif paternal_genotype == 0:
                    prior = 0
            elif fetal_genotype == 1:
                prior = 0.5
            elif fetal_genotype == 0:
                if paternal_genotype == 2:
                    prior = 0
                elif paternal_genotype == 1:
                    prior = 0.25
                elif paternal_genotype == 0:
                    prior = 0.5
            variant_priors.append(prior)
        priors_list.append([variant_name] + variant_priors)

    priors_array = np.array(fetal_priors_list)
    priors_df = pd.DataFrame(data = priors_array[1:,1:], index = priors_array[1:,0], columns = priors_array[0,1:])
    return priors_df


# ------------------------------- MAIN -------------------------------

parents_gt = parse_vcf_to_array(parents_vcf_file)
cfdna_gt = parse_vcf_to_array(cfdna_vcf_file)
#cfdna_priors_df = calculate_prior_probabilities(cfdna_gt, parents_gt)
#print(cfdna_priors_df)
#print(parents_gt.query('(M12148W == 2) & (H12148W == 0)'))
print(parents_gt.query('H12148W == None'))

# cfdna_df = parse_vcf_to_pandas()
# parents_df = parse_vcf_to_pandas()

# cfdna_priors_df = pd.DataFrame(columns = ['var_uid', 'true', '1/1', '0/1', '0/0']) # add these as columns to cfdna vcf

# for rec in cfdna_vcf:
#     var_uid = vcf_rec_to_var_uid(rec)
#     priors = calculate_prior_probability(rec, cfdna_vcf, parents_vcf)
#     cfdna_df.append([var_uid, rec.genotype, priors['1/1'], priors['0/1'], priors['0/0']]) # add columns of calculated priors






